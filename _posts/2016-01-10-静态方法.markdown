---
layout: post
title: "静态方法、面向对象和函数"
date: 2016-01-10
---
开始之前
---
一晃一年又过去了，年初给自己定下的好多计划到现在完成的情况似乎都是惨不忍睹。不过想到码龄又多了一岁我也就不说什么了。。
毕竟收获和成长还是不容忽略的，这个我打算到过农历年的时候总结一下。
上一次更新博客还是去年过年的时候了。。而且还是试验性的随便写了一点。今年准备参加工作了，
可能更需要经常对自己的东西做些总结和思考，所以今年应该会更新的多一点。希望如此。

why静态方法？
---
为什么是静态方法？首先，我已经有近2个月时间没有去看Java相关的东西了，趁现在对Java没什么感觉的时候抓紧机会好好吐槽一下:)。
而之所以选静态方法是因为最近在学PHP的时候又碰到这个东西，觉得很无语，所以今天好好聊聊这个静态方法。

静态方法有什么错？
---
等等，静态方法有错？你凭什么这么说。我们在学习Java的时候，就被告知Java类有两种方法，一种叫实例方法，一种叫静态方法。
实例方法只能通过类的实例即对象去调用，而静态方法则不需要这个实例，你使用它就好像你在使用C里面的函数一样，
尽管给它参数就好了。然后，这个知识点就一代一代的传了下来（说实话，当初学Java的时候就觉得很高兴，
各种知识都被总结成了一个个很容易记忆的知识点，就好像以前高中历史书上记满了的知识点一样）。这个东西的确很容易理解，
不就是函数嘛，非要给它起个奇怪的名字*static method*。名字的作用是很大的，
有时候一个新的名字就可以让一个濒死的事物焕发生机。我之所以说静态方法有错，只是为了吸引你的注意而已。。
但是我们的确可以好好重新审视一下所谓的静态方法到底是个什么东西。再看看它对我们的编程有什么帮助。

起源
---
既然有静态方法，那就有不是静态的方法，而那个不是静态的方法就叫做实例方法(*instance method*)或者直接就叫它方法。
那么为什么会有这两个东西呢？很明显，是因为我们是在学习一个*Object Oriented Programming Language*！对嘛，面向对象的语言，
比如说Java。我们觉得C的那套太low了，必须得用面向对象的思想去指导我们生产学习，写代码不来点面向对象多没意思，
写个什么不用个class都觉得不专业。好，那我们就来简单谈谈面向对象（深入的我也不懂）。

世界上第一个面向对象的编程语言是Simula，大约发明于60年代后期。在它之前，数据和过程是互相独立的，
而Simula首创了数据和过程结合起来的编程方法。大体原因是觉得数据结构跟过程分离开，这样很难对数据结构进行更改，
因为要这样做的话，你得更改所有使用它的过程。

这是个什么道理？我们在学数据结构的时候用的不就是C吗？也没有类啊，也没有出现这种把数据结构改了，
其它用到这个数据结构的代码就都得改得情况啊？不是只要改操作这个数据结构的那几个函数不就行了？

我们来看一个栈的例子，来自于[《松本行泓的程序世界》](http://book.douban.com/subject/6756090/)
{% highlight ruby %}
# 用Stack.new生成新的栈
stack = Stack.new
# 对stack进行push操作
stack.push(5)
stack.push(9)
# 用stack的pop方法取出数据
puts stack.pop() # 显示9
puts stack.pop() # 显示5
{% endhighlight %}
这个是用Stack这个类（貌似需要自己去定义）定义的api来对栈进行操作的。再看下面这个：
{% highlight ruby %}
# 用数组实现栈的操作
stack = []
# 数组的先头位置
sp = 0

stack[sp] = 5
sp += 1
stack[sp] = 9
sp += 1

sp -= 1
puts stack[sp]
sp -= 1
puts stack[sp]
{% endhighlight %}
对比上面两种操作栈的方式，你大概就能明白他们说的是什么问题了。你用类的话就只能用类提供的方法去操作数据，否则你就可以随意
的对数据结构的内部实现进行操作，不把一个栈当做一个栈，而是把它当做数组去操作。这就是为什么在C里面改动数据结构的内部实
现（比如说struct里面的一个字段）会影响某些使用它的代码，因为它们直接操作了struct里面的字段。而如果按照数据结构书上面的那
种方法，通过一些函数去操作就会变得可控的多。因为你到时候只要改一下有限的那几个函数就够了。所以我们看到现在几乎所有的面向
对象的语言都可以提供这种将数据结构和操作它的函数绑定在一起的编程方式。有人将之称作ADT（Abstract Data Type），虽然也有人
说并不能叫做ADT，不过那又是另一个故事了。

但是，我可没说这就是面向对象了。这只是一个方面，我觉得还比较重要的一个方面。

有了这些铺垫，我们就可以理解Java里面的实例方法是个什么概念了。你new了一个类，就会给你这个类里面的字段开辟内存空间，这是
你的数据。而你要操作这些数据，你必须用这个类给你提供的方法，也就是实例方法。这里就将数据结构跟操作它的函数绑定在了一起。

终于谈到正题了！！！那么，静态方法是个什么鬼！我不能理解它在一个OOP里面是处在什么地位，表达的是什么概念。

静态方法与函数
---
这两个东西怎么看都像是一样的，既然如此，那我就来说说不一样的。
- 静态方法可以有命名空间
- 静态方法有访问控制

此外，静态方法与函数并没有太多的区别。静态方法有命名空间是因为类处在命名空间里，并且，由于静态方法属于类，又多了一层保护伞。而访问控制是Java提供的一个语言特性，很有用，但不能使静态方法从本质上区别于普通的函数。

大多数的静态方法是它所属的那个类相关的一些工具函数，用《Thinking In Java》里面的描述“常常拿来做‘牧羊人’的角色，负责看护与其隶属同一类型的实例群”。那么，一个类可能使用的工具函数属于这个类的抽象吗？类是一种抽象，所有这个类的实例（也就是对象）都共享着这种抽象，它们有着类似的行为，但是工具函数算是这个类的抽象吗？这些工具函数可能对这一类的对象都比较有用，但是因为对它们有用就可以放到这个类里面吗？那这个类的定义到底是在定义些什么呢？既然我们用类将数据结构和过程结合起来，这让我们看到类定义的时候就直接看到了相关联的数据和逻辑，那么何必又额外添加另外一种概念的东西，这种东西并不属于对象的行为，而是服务于所有这些对象的通用函数。当然，你也可以说，正因为它服务于所有这些对象，它放在类里面也刚刚好。但是，你要知道你的类定义是用来干嘛的，如果你像我一样，认为它是一个模板，是对将要生成的对象的一种描述，那么这些静态方法就不是那么自然了。我个人觉得，静态方法就是函数，只不过它比C中的函数加了一些有益的改进，但仍然是函数，大家愿意使用它可能也说明了大家觉得其实并不是所有东西都需要抽象成类的形式，很多时候，你需要的只是简单的函数（但是Java非要说它的代码全都由class组成，强行将函数塞到class里面）。很多人都会把面向过程和面向对象分开来讲，甚至将它们对立起来，好像他们是两种非常不同的东西。他们研究出了一大堆理论、写了大量的文章想让你相信，面向对象在根本上是种不同的东西。但是我觉得真正有用的是“面向对象”带来的技术改进，我们觉得它更符合我们的抽象方式（大部分情况下），但是有时候我们又觉得我们仅仅只需要一个函数，让它做一件事情，这就足够了。所以，我们的角色其实很少改变过，我们尝试各种方法想将我们的想法传递给计算机，因为计算机不懂我们。而程序语言就在中间扮演一个桥梁作用，既然是桥梁，就涉及到两头，一头是我们，我们作为使用者，必须要舒服，如果程序语言能以更符合我们人类思考习惯的方式工作，我们会更加有效率；而在另一头是计算机，对于它，我们一般希望的是让它运行的更快，这就要求程序语言实现的更高效。真正困难的我觉得是如何在人类习惯和机器速度之间找到平衡点，让这两边的转化能够更加高效和自然。

说的有点远。。不过我只是想说明，静态方法和函数没有本质的区别。似乎很多人都是这么想的，那么我又在这里说了一大通是为了什么呢？

理解
---
其实，就算函数被叫做静态方法，也不会让我们的编程变得有多么的不同。但是有一点，那就是可读性。想一想，如果我们的类里面完全没有static修饰的东西，是不是会更清晰一点。也许只是一点，但是这一点有时候能够帮助我们更好的理解类的主旨。所以，我建议将静态方法与其他普通的方法隔离开，并且任何时候只是把它当做一个处在奇怪位置的函数来看待。

尾声
---
静态方法在类定义里面并不是必要的东西，这些静态方法或者静态字段明明就是另一个概念，与类无关的概念。它们应该有个更好的地方居住。在Scala里面有一个伴生对象的概念，它提供了一个不错的解决方案。这个伴生对象的调用方式就跟静态方法一样，因为这个伴生对象跟类有着相同的名字，只不过在定义它的时候是用的object关键字，这也解决了另一个问题，那就是单例对象的问题，如果你只要一个对象，那么直接用object定义一个好了，不需要用class定义。我认为这样更合理一些，本来类就是一种抽象，如果你到头来只要一个独一无二的对象，那又何必抽象出来一个类呢？

我小题大作了吗？也许吧。不过我只是觉得我们提出一个概念应该更加小心一点，少一个莫须有的概念就少一点困惑，少一点脑力负担，我们的生活也因此会更加轻松愉快一些。
