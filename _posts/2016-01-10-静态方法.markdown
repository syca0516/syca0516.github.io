---
layout: post
title: "静态方法、面向对象和函数"
date: 2016-01-10
---
[TOC]

开始之前
---
一晃一年又过去了，年初给自己定下的好多计划到现在完成的情况似乎都是惨不忍睹。不过想到码龄又多了一年我也就不说什么了。。
毕竟收获和成长还是不容忽略的，这个我打算到过农历年的时候总结一下。
上一次更新博客还是去年过年的时候了。。而且还是试验性的随便写了一点。今年准备参加工作了，
可能更需要经常对自己的东西做些总结和思考，所以今年应该会更新的多一点。希望如此。

why静态方法？
---
为什么是静态方法？首先，我已经有近2个月时间没有去看Java相关的东西了，趁现在对Java没什么感觉的时候抓紧机会好好吐槽一下:)。
而之所以选静态方法是因为最近在学PHP的时候又碰到这个东西，觉得很无语，所以今天好好聊聊这个静态方法。

静态方法有什么错？
---
等等，静态方法有错？你凭什么这么说。我们在学习Java的时候，就被告知Java类有两种方法，一种叫实例方法，一种叫静态方法。
实例方法只能通过类的实例即对象去调用，而静态方法则不需要这个实例，你使用它就好像你在使用C里面的函数一样，
尽管给它参数就好了。然后，这个知识点就一代一代的传了下来（说实话，当初学Java的时候就觉得很高兴，
各种知识都被总结成了一个个很容易记忆的知识点，就好像以前高中历史书上记满了的知识点一样）。这个东西的确很容易理解，
不就是函数嘛，非要给它起个奇怪的名字*static method*。名字的作用是很大的，
有时候一个新的名字就可以让一个濒死的事物焕发生机。我之所以说静态方法有错，只是为了吸引你的注意而已。。
但是我们的确可以好好重新审视一下所谓的静态方法到底是个什么东西。再看看它对我们的编程有什么帮助。

起源
---
既然有静态方法，那就有不是静态的方法，而那个不是静态的方法就叫做实例方法(*instance method*)或者直接就叫它方法。
那么为什么会有这两个东西呢？很明显，是因为我们是在学习一个*Object Oriented Programming Language*！对嘛，面向对象的语言，
比如说Java。我们觉得C的那套太low了，必须得用面向对象的思想去指导我们生产学习，写代码不来点面向对象多没意思，
写个什么不用个class都觉得不专业。好，那我们就来简单谈谈面向对象（深入的我也不懂）。

世界上第一个面向对象的编程语言是Simula，大约发明于60年代后期。在它之前，数据和过程是互相独立的，
而Simula首创了数据和过程结合起来的编程方法。大体原因是觉得数据结构跟过程分离开，这样很难对数据结构进行更改，
因为要这样做的话，你得更改所有使用它的过程。

这是个什么道理？我们在学数据结构的时候用的不就是C吗？也没有类啊，也没有出现这种把数据结构改了，
其它用到这个数据结构的代码就都得改得情况啊？不是只要改操作这个数据结构的那几个函数不就行了？

我们来看一个栈的例子，来自于[《松本行泓的程序世界》](http://book.douban.com/subject/6756090/)
```ruby
# 用Stack.new生成新的栈
stack = Stack.new
# 对stack进行push操作
stack.push(5)
stack.push(9)
# 用stack的pop方法取出数据
puts stack.pop() # 显示9
puts stack.pop() # 显示5
```
这个是用Stack这个类（貌似需要自己去定义）定义的api来对栈进行操作的。再看下面这个：
```ruby
# 用数组实现栈的操作
stack = []
# 数组的先头位置
sp = 0

stack[sp] = 5
sp += 1
stack[sp] = 9
sp += 1

sp -= 1
puts stack[sp]
sp -= 1
puts stack[sp]
```
对比上面两种操作栈的方式，你大概就能明白他们说的是什么问题了。你用类的话就只能用类提供的方法去操作数据，否则你就可以随意
的对数据结构的内部实现进行操作，不把一个栈当做一个栈，而是把它当做数组去操作。这就是为什么在C里面改动数据结构的内部实
现（比如说struct里面的一个字段）会影响某些使用它的代码，因为它们直接操作了struct里面的字段。而如果按照数据结构书上面的那
种方法，通过一些函数去操作就会变得可控的多。因为你到时候只要改一下有限的那几个函数就够了。所以我们看到现在几乎所有的面向
对象的语言都可以提供这种将数据结构和操作它的函数绑定在一起的编程方式。有人将之称作ADT（Abstract Data Type），虽然也有人
说并不能叫做ADT，不过那又是另一个故事了。

但是，我可没说这就是面向对象了。这只是一个方面，我觉得还比较重要的一个方面。

有了这些铺垫，我们就可以理解Java里面的实例方法是个什么概念了。你new了一个类，就会给你这个类里面的字段开辟内存空间，这是
你的数据。而你要操作这些数据，你必须用这个类给你提供的方法，也就是实例方法。这里就将数据结构跟操作它的函数绑定在了一起。

终于谈到正题了！！！那么，静态方法是个什么鬼！我不能理解它在一个OOP里面是处在什么地位，表达的是什么概念。

尾声
---
我不是有意这样做的。但是我发现我需要更多的资料来表达我的观点。那就是静态方法在类定义里面并不是必要的东西，这些静态方法或
者静态字段明明就是另一个概念，与类无关的概念。更多的补充会陆续添加。